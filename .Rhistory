clinical_outcome <- clinical_outcome$GSE120396_series_matrix.txt.gz
print(clinical_outcome$characteristics_ch1.1[1:16])
clinical_outcome <-getGEO("GSE120396")
clinical_outcome<- clinical_outcome$GSE120396_series_matrix.txt.gz
print(clinical_outcome$characteristics_ch1.1[1:10])
outcome = m$GSE120649_series_matrix.txt.gz@phenoData@data[["description"]]
rejection_status  <- clinical_outcome$characteristics_ch1.1
rejection_status <- unlist(lapply( strsplit(as.character(rejection_status), ": " ) , `[[` , 2)  )
table(rejection_status)
p <- ggplot(melt(gse), aes(x=variable, y=value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=0.5, notch=FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (x = "patient", y = "expression value") + theme_minimal()
p
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = as.matrix(t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
cv_50acc5_svm <- append(cv_50acc5_svm, mean(cv_acc_svm))
cv_50acc5_rf <- append(cv_50acc5_rf, mean(cv_acc_rf))
} ## end for
length(X_train)
length(X_test)
nrow(X_train)
length(X_test)
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = as.matrix(t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
cv_50acc5_svm <- append(cv_50acc5_svm, mean(cv_acc_svm))
cv_50acc5_rf <- append(cv_50acc5_rf, mean(cv_acc_rf))
} ## end for
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = as.matrix(t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
cv_50acc5_svm <- append(cv_50acc5_svm, mean(cv_acc_svm))
cv_50acc5_rf <- append(cv_50acc5_rf, mean(cv_acc_rf))
} ## end for
length(y_train)
length(X_Train)
length(X_train)
rejection_status  <- clinical_outcome$characteristics_ch1.1
rejection_status <- unlist(lapply( strsplit(as.character(rejection_status), ": " ) , `[[` , 2)  )
table(rejection_status)
length(gse)
cols(gse)
col(gse)
colnames(gse)
length(X_train)
clinical_outcome <-getGEO("GSE120396")
clinical_outcome <- clinical_outcome$GSE120396_series_matrix.txt.gz
print(clinical_outcome$characteristics_ch1.1[1:10])
rejection_status  <- clinical_outcome$characteristics_ch1.1
rejection_status <- unlist(lapply( strsplit(as.character(rejection_status), ": " ) , `[[` , 2)  )
table(rejection_status)
X = (t(gse[ind,]))
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = (t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
cv_50acc5_svm <- append(cv_50acc5_svm, mean(cv_acc_svm))
cv_50acc5_rf <- append(cv_50acc5_rf, mean(cv_acc_rf))
} ## end for
p <- ggplot(melt(gse), aes(x=variable, y=value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=0.5, notch=FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (x = "patient", y = "expression value") + theme_minimal()
p
summary(gse[,1])
summary(gse[,1])\
summary(gse[,1])
print(rownames(gse[1:50, ]))
dim(gse)
# Note: please change this dir to point to the folder where your dataset is
datadir = "GSE120396/"
# Read in the files
fileNames <- list.files(datadir)
gse = c()
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
# Note: please change this dir to point to the folder where your dataset is
datadir = "GSE120396/"
# Read in the files
fileNames <- list.files(datadir)
gse = c()
# unzip all the 88 files
for (files in fileNames){
gunzip(file.path(datadir,files))
}
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
# Note: please change this dir to point to the folder where your dataset is
datadir = "GSE120396/"
# Read in the files
fileNames <- list.files(datadir)
gse = c()
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
rownames(gse) = read.delim(file.path(datadir, fileNames[1]), header=TRUE)[,1]
rejection_status  <- clinical_outcome$characteristics_ch1.1
rejection_status <- unlist(lapply( strsplit(as.character(rejection_status), ": " ) , `[[` , 2)  )
table(rejection_status)
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = (t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
cv_50acc5_svm <- append(cv_50acc5_svm, mean(cv_acc_svm))
cv_50acc5_rf <- append(cv_50acc5_rf, mean(cv_acc_rf))
} ## end for
boxplot(cv_50acc5_knn)
boxplot(cv_50acc5_svm)
boxplot(cv_50acc5_rf)
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = (t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
} ## end for
boxplot(cv_50acc5_rf)
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = (t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
} ## end for
boxplot(cv_50acc5_rf)
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = (t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
} ## end for
boxplot(cv_50acc5_rf)
boxplot(cv_50acc5_knn)
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = (t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
} ## end for
boxplot(cv_50acc5_knn)
devtools::install_github("GuangchuangYu/nCov2019")
source('E:/DATA3888-Labs/Assignments/Ass 3/server.R', echo=TRUE)
runApp()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
runApp()
runApp()
runApp()
runApp()
df(asd)
df(cv_50acc5_knn)
as.data.frame(cv_50acc5_knn)
runApp()
runApp()
as.data.frame(cv_50acc5_knn)
as.data.frame(cv_50acc5_knn)
as.data.frame(cv_50acc5_knn) %>% ggplot() +
geom_boxplot()
as.data.frame(cv_50acc5_knn) %>% ggplot() +
geom_boxplot(aes(y=cv_50acc5_knn))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
all_stuff
all_stuff
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test = append(test(), a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("reactiveValues")
runApp()
runApp()
runApp()
runApp()
a = data.frame()
b = c(1,2,3,4,5,6)
a
rbind(a,b)
cbind(a,b)
stack(a,b)
nameVector <- unlist(mapply(function(x,y){ rep(y, length(x)) }, l, n))
cbind.data.frame(b, "a")
cbind.data.frame(b, "b")
cbind.data.frame(b, a="b")
c = cbind.data.frame(b, a="b")
cbind(c, cbind.data.frame(b, a="d"))
rbind(c, cbind.data.frame(b, a="d"))
help("toString")
rbind(data.frame(), cbind.data.frame(b, a="d"))
runApp()
runApp()
runApp()
runApp()
test$df %>%
ggplot(aes(x="k", y="cv_50acc5_knn")) +
geom_boxplot() +
labs(x = "Time",
y = "Wind (km/h)")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE)
runApp()
X_train
66 + @
66 + 22
length(gse)
gse
For this, we'll need to introduce some data, and some classification task for that data.
The data I've selected is a RNA-sequencing dataset, containing gene expression of 88 kidney transplant patients' cells.
This data was collected for the purposes of predicting a patient's likelyhood of developing graft rejection after a kidney transplant, so we'll be attempting to perform the same task in this report.
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='claudiolucini',
token='9091801747BB5620837F2A51826814B1',
secret='9/s4aO7i/s7IV5AGvhayuu0pX+v6j9lp6sGOQH/e')
library(rsconnect)
rsconnect::deployApp('.')
library(rsconnect)
rsconnect::deployApp()
library(rsconnect)
rsconnect::deployApp()
library(rsconnect)
rsconnect::deployApp()
install.packages(BiocManager)
install.packages("BiocManager")
install.packages("BiocManager")
library(rsconnect)
rsconnect::deployApp()
library(BiocManager)
options(repos = BiocManager::repositories())
instal.packages("Bioconducter")
install.packages("Bioconductor")
install.packages("Bioconductor")
